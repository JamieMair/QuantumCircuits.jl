var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumCircuits","category":"page"},{"location":"#QuantumCircuits","page":"Home","title":"QuantumCircuits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumCircuits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuantumCircuits]","category":"page"},{"location":"#QuantumCircuits.EastModelHamiltonian","page":"Home","title":"QuantumCircuits.EastModelHamiltonian","text":"A struct containing the parameters of the East Model.\n\nThe form of H represented by this struct is\n\nmathcalH = -e^-s sqrtc(1-c) left  X_1 + sum_j=2^N n_j-1X_j right  + (1-2c)left  n_1 + sum_j=2^N n_j-1n_j + c sum_j=2^N n_j-1right  + c\n\nWe precompute the scalars A and B such that\n\nbeginalign*\nA = -e^-s sqrtc(1-c) \nB = (1-2c)\nendalign*\n\n\n\n\n\n","category":"type"},{"location":"#QuantumCircuits.TFIMHamiltonian","page":"Home","title":"QuantumCircuits.TFIMHamiltonian","text":"A struct containing the parameters of the Transverse Field Ising Model.\n\nThe form of H represented by this struct is\n\nmathcalH = -J left ( sum_langle ijrangle sigma_z^(i)sigma_z^(j) + g sum_i sigma_x^(i) + h sum_i sigma_z^(i) right )\n\n\n\n\n\n","category":"type"},{"location":"#QuantumCircuits.apply-Tuple{AbstractArray, GenericBrickworkCircuit}","page":"Home","title":"QuantumCircuits.apply","text":"Applies the given circuit to the state Ïˆ.\n\nThe original state is not modified, unlike in the apply! version.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumCircuits.build_general_unitary_gate-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Number","page":"Home","title":"QuantumCircuits.build_general_unitary_gate","text":"Builds a two qubit gate based on rotation angles given in an array.\n\nMust supply exactly 15 angles.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumCircuits.operation_tensor-Tuple{Any}","page":"Home","title":"QuantumCircuits.operation_tensor","text":"operation_tensor(gates...)\n\nTakes a list of gates to create a Kronecker product matrix that represents the operation.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumCircuits.zero_state_tensor-Tuple{Any, Integer}","page":"Home","title":"QuantumCircuits.zero_state_tensor","text":"zero_state_vec([type=ComplexF64], n::Integer)\n\nCreates a state tensor representing n qubits in the state |00...0>, with dimensions 2x2x...x2. \n\n\n\n\n\n","category":"method"},{"location":"#QuantumCircuits.zero_state_vec-Tuple{Any, Integer}","page":"Home","title":"QuantumCircuits.zero_state_vec","text":"zero_state_vec([type=ComplexF64], n::Integer)\n\nCreates a state vector representing n qubits in the state |00...0>.\n\n\n\n\n\n","category":"method"}]
}
